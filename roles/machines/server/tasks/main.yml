---
- import_role: name=common
- import_role: name=pacsync
- import_role: name=systemd-timesyncd

- import_role: name=personal-repo
  vars: { server_path: "file:///srv/pkgs" }

# Bootstrap personal packages repo
#- name: Ensure personal packages repo directory exists
#  file: path=/srv/pkgs state=directory
#
#- name: Bootstrapping personal packages
#  shell: |
#    package="{{ item }}"
#    cd "$(mktemp -d)"
#    git clone https://github.com/evanpurkhiser/PKGBUILDs.git .
#    # TODO: Figure out how to make this happen with rkt
#    #rkt run -e EXPORT_PKG=1 -v "$PWD/$package":/pkg docker://whynothugo/makepkg
#    mv "$PWD/$package"/*.pkg.tar.xz /srv/pkgs && cd && rm -r "$OLDPWD"
#  args:
#    creates: /srv/pkgs/{{ item }}*.pkg.tar.xz
#  notify:
#  - sync personal repo database
#  - sync pacman cache
#  with_items:
#  - media-center-automation
#  - waitress-git

# Flush handlers to ensure new personal packages are synced into the database
- meta: flush_handlers

# Setup ZFS repo
- name: Add arch ZFS repo
  copy: src=archzfs-repo dest=/etc/pacman.d

- name: Include archzfs repo in pacman.conf
  lineinfile: dest=/etc/pacman.conf line="Include = /etc/pacman.d/archzfs-repo"
  notify: sync pacman cache

- name: Install required packages
  pacman:
    name:
      - archzfs-linux
      - bash-completion
      - dnsmasq
      - mosquitto
      - nfs-utils
      - nginx
      - rclone
      - rsync
      - transmission-cli
      - wget

      # Required for encrypting the transmission basic auth password
      - python-passlib

- import_tasks: network.yml
- import_tasks: rclone.yml

# Configure udev rules for the zigbee / zwave adapter
- name: Ensure zigbee / zwave rules
  copy: src=99-usb-gocontrol.rules dest=/etc/udev/rules.d/
  notify: udev reload

# Configure NFS shares
- name: Enable nfs-server service
  service: name=nfs-server state=started enabled=yes
  tags: [nfs]

- name: Enable nfs rpcbind socket activation (nfs v2/3)
  service: name=rpcbind.socket enabled=yes
  tags: [nfs]

- name: Ensure documents device is exported
  copy: src=exports dest=/etc/exports
  notify: reload nfs exports
  tags: [nfs]

# Configure nginx server
- name: Enable nginx server
  service: name=nginx state=started enabled=yes
  tags: [nginx]

- name: Ensure nginx server configuration
  copy: src=nginx.conf dest=/etc/nginx/
  notify: reload nginx
  tags: [nginx]

- name: Encrypt transmission basic-auth password
  htpasswd: path=/etc/nginx/htpasswd_transmission
    mode=600
    owner=http
    name=evan
    password={{ transmission_rpc_password }}
  tags: [nginx]

# Configure transmission
- name: Ensure transmission configuration directory exists
  file: path=/home/evan/.config/transmission-daemon state=directory
  tags: [transmission]

- name: Ensure transmission runs as "evan"
  copy: src=transmission-user.conf dest=/etc/systemd/system/transmission.service.d/
  tags: [transmission]

- name: Ensure transmission configuration
  copy: src=transmission-settings.json dest=/home/evan/.config/transmission-daemon/settings.json
  notify: reload transmission
  tags: [transmission]

- name: Enable transmission daemon
  service: name=transmission state=started enabled=yes
  tags: [transmission]

# Configure docker watchtower
- name: Ensure watchtower docker serivce
  tags: [watchtower]
  docker_container:
    name: watchtower
    image: containrrr/watchtower
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
    env:
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_POLL_INTERVAL: "120"

# Enable mosquito service for IoT messages
- name: Ensure mosquitto is enabled
  service: name=mosquitto enabled=yes state=started
  tags: [hass]

- name: Ensure mosquitto configuration
  copy: src=mosquitto.conf dest=/etc/mosquitto/mosquitto.conf
  notify: restart mosquitto
  tags: [hass]

# Configure home-assistant service
- name: Ensure hass config directory exists
  file: path=/var/lib/hass state=directory
  tags: [hass]

- name: Ensure hass Lutron certs
  with_items:
    - { key: caseta_crt, path: /var/lib/hass/caseta.crt }
    - { key: caseta_key, path: /var/lib/hass/caseta.key }
    - { key: caseta_bridge_crt, path: /var/lib/hass/caseta-bridge.crt }
  copy: content="{{ lutron[item.key] }}" dest="{{ item.path }}"
  notify: restart home-assistant
  tags: [hass]

- name: Ensure hass configuration
  copy: src=home-assistant.yaml dest=/var/lib/hass/configuration.yaml
  notify: restart home-assistant
  tags: [hass]

- name: Ensure hass secrets
  template: src=home-assistant-secrets.yaml dest=/var/lib/hass/secrets.yaml
  notify: restart home-assistant
  tags: [hass]

- name: Ensure hass docker container
  tags: [hass]
  docker_container:
    name: home-assistant
    image: homeassistant/home-assistant
    init: false
    network_mode: host
    restart_policy: unless-stopped
    volumes:
      - "/var/lib/hass:/config"
      - "/tmp/hass-ad:/var/lib/hass-ad"
      - "/etc/localtime:/etc/localtime:ro"
    devices:
      - "/dev/zwave:/dev/zwave"
      - "/dev/zigbee:/dev/zigbee"

# Setup appdaemon service
- name: Ensure appdaemon config directory exists
  file: path=/var/lib/appdaemon state=directory
  tags: [appdaemon]

- name: Ensure appdaemon configuration
  copy: src=appdaemon.yaml dest=/var/lib/appdaemon/
  notify: restart appdaemon
  tags: [appdaemon]

- name: Ensure appdaemon secrets
  template: src=appdaemon-secrets.yaml dest=/var/lib/appdaemon/secrets.yaml
  notify: restart appdaemon
  tags: [appdaemon]

- name: Ensure appdaemon apps
  copy: src=appdaemon/ dest=/var/lib/appdaemon/apps/
  tags: [appdaemon]

- name: Ensure appdaemon docker container
  tags: [appdaemon]
  docker_container:
    name: appdaemon
    image: acockburn/appdaemon
    published_ports: ["5050:5050"]
    restart_policy: unless-stopped
    volumes:
      - "/var/lib/appdaemon:/conf"
      - "/tmp/hass-ad:/var/lib/hass-ad"
      - "/etc/localtime:/etc/localtime:ro"

# Setup waitress file server service
- name: Ensure waitress docker container
  tags: [waitress]
  docker_container:
    name: waitress
    image: evanpurkhiser/waitress
    published_ports: ["9005:80"]
    volumes: ["/mnt/documents:/mnt/documents"]
    env:
      DATA_PATH: /mnt/documents/public-share

# Setup tune-manager service
- name: Ensure tune-manager storage directory exists
  file: path=/var/lib/tune-manager state=directory
  tags: [tune-manager]

- name: Ensure tune-manager docker container
  tags: [tune-manager]
  docker_container:
    name: tune-manager
    image: evanpurkhiser/tune-manager
    published_ports: ["6060:80"]
    volumes:
      - "/mnt/documents/multimedia/djing/tracks:/library"
      - "/mnt/documents/multimedia/djing/tracks-importable:/staging"
      - "/var/lib/tune-manager:/storage"

# Setup venmo-auto-cashout service
- name: Ensure venmo-auto-cashout database directory exists
  file: path=/var/lib/venmo-auto-cashout state=directory

- name: Install venmo-auto-cashout timer and service
  copy: src=systemd/venmo-auto-cashout.{{ item }} dest=/etc/systemd/system/
  with_items: [timer, service]
  notify: systemd daemon-reload

- name: Enable venmo-auto-cashout timer service
  service: name=venmo-auto-cashout.timer enabled=yes state=started

# Configure DNS entires in cloudflare
- name: Ensuring DNS entries
  tags: [dns]
  with_items: "{{ lookup('file', 'files/dns_records.yml') | from_yaml }}"
  cloudflare_dns:
    account_email: "{{ cloudflare.email }}"
    account_api_token: "{{ cloudflare.token }}"

    state: present
    zone: evanpurkhiser.com
    name: "{{ item.name }}"
    type: "{{ item.type }}"
    proxied: "{{ item.proxied | default('no') }}"
    content: "{{ item.content }}"
